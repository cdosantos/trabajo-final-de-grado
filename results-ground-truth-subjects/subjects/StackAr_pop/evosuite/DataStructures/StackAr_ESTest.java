/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 02 13:15:45 GMT 2024
 */

package DataStructures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import DataStructures.StackAr;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackAr_ESTest extends StackAr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StackAr stackAr0 = new StackAr(56);
      stackAr0.push("");
      stackAr0.makeEmpty();
      assertTrue(stackAr0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StackAr stackAr0 = new StackAr(56);
      stackAr0.isFull();
      assertTrue(stackAr0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StackAr stackAr0 = new StackAr(56);
      boolean boolean0 = stackAr0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StackAr stackAr0 = new StackAr(970);
      stackAr0.push((Object) null);
      stackAr0.push((Object) null);
      stackAr0.topAndPop();
      assertFalse(stackAr0.isEmpty());
      
      stackAr0.pop();
      stackAr0.topAndPop();
      assertTrue(stackAr0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StackAr stackAr0 = new StackAr(990);
      stackAr0.push((Object) null);
      assertFalse(stackAr0.isEmpty());
      
      stackAr0.topAndPop();
      assertTrue(stackAr0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StackAr stackAr0 = new StackAr(990);
      stackAr0.top();
      assertTrue(stackAr0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      Object object0 = new Object();
      try { 
        stackAr0.push(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataStructures.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StackAr stackAr0 = new StackAr(2803);
      try { 
        stackAr0.pop();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataStructures.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StackAr stackAr0 = null;
      try {
        stackAr0 = new StackAr((-3304));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataStructures.StackAr", e);
      }
  }
}
