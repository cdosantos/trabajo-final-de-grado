/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 02 13:11:15 GMT 2024
 */

package examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import examples.MinFinder;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinFinder_ESTest extends MinFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinFinder.T minFinder_T0 = new MinFinder.T((-36));
      MinFinder.T minFinder_T1 = new MinFinder.T((-306));
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      arrayList0.add(minFinder_T0);
      MinFinder minFinder0 = new MinFinder(arrayList0);
      // Undeclared exception!
      try { 
        minFinder0.chval(minFinder_T1, (-306));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MinFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinFinder.T minFinder_T0 = new MinFinder.T((-2944));
      boolean boolean0 = minFinder_T0.equals(minFinder_T0);
      assertEquals((-2944), minFinder_T0.getVal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder minFinder0 = new MinFinder(arrayList0);
      MinFinder.T minFinder_T0 = new MinFinder.T((-1));
      arrayList0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T(0);
      arrayList0.add(minFinder_T1);
      minFinder0.chval((MinFinder.T) null, (-1500));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T((-12));
      minFinder0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T((-1690));
      minFinder0.add(minFinder_T1);
      minFinder0.chval((MinFinder.T) null, (-1690));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      minFinder0.add((MinFinder.T) null);
      minFinder0.chval((MinFinder.T) null, (-1375));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T(1850);
      minFinder0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T(6780);
      minFinder0.add(minFinder_T1);
      assertEquals(6780, minFinder_T1.getVal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T((-12));
      minFinder0.add(minFinder_T0);
      minFinder0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T((-1690));
      minFinder0.add(minFinder_T1);
      assertEquals((-1690), minFinder_T1.getVal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinFinder.T minFinder_T0 = new MinFinder.T((-1353));
      int int0 = minFinder_T0.getVal();
      assertEquals((-1353), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      minFinder0.clear();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T(1850);
      minFinder0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T(6780);
      // Undeclared exception!
      try { 
        minFinder0.chval(minFinder_T1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MinFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T((-12));
      minFinder0.add(minFinder_T0);
      minFinder0.add(minFinder_T0);
      minFinder0.chval((MinFinder.T) null, (-1690));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder minFinder0 = new MinFinder(arrayList0);
      minFinder0.add((MinFinder.T) null);
      // Undeclared exception!
      try { 
        minFinder0.add((MinFinder.T) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MinFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder minFinder0 = new MinFinder(arrayList0);
      MinFinder.T minFinder_T0 = minFinder0.findmin();
      arrayList0.add((MinFinder.T) null);
      arrayList0.add(minFinder_T0);
      MinFinder minFinder1 = null;
      try {
        minFinder1 = new MinFinder(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MinFinder", e);
      }
  }
}
