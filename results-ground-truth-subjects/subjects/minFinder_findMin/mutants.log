1:STD:<CALL>:<NO-OP>:examples.MinFinder@<init>():9:clear() |==> <NO-OP>
2:STD:<CALL>:<NO-OP>:examples.MinFinder@add(examples.MinFinder.T):13:_var88.add(x) |==> <NO-OP>
3:LVR:TRUE:FALSE:examples.MinFinder@add(examples.MinFinder.T):16:true |==> false
4:COR:_first293243:TRUE:examples.MinFinder@add(examples.MinFinder.T):19:_first293243 |==> false
5:COR:_first293243:FALSE:examples.MinFinder@add(examples.MinFinder.T):19:_first293243 |==> true
6:LVR:TRUE:FALSE:examples.MinFinder@add(examples.MinFinder.T):20:true |==> false
7:ROR:<(int,int):!=(int,int):examples.MinFinder@add(examples.MinFinder.T):22:(_x293244).getVal() < (_min293242).getVal() |==> (_x293244).getVal() != (_min293242).getVal()
8:ROR:<(int,int):<=(int,int):examples.MinFinder@add(examples.MinFinder.T):22:(_x293244).getVal() < (_min293242).getVal() |==> (_x293244).getVal() <= (_min293242).getVal()
9:ROR:<(int,int):FALSE(int,int):examples.MinFinder@add(examples.MinFinder.T):22:(_x293244).getVal() < (_min293242).getVal() |==> false
10:COR:_v293245:TRUE:examples.MinFinder@add(examples.MinFinder.T):24:_v293245 |==> false
11:COR:_v293245:FALSE:examples.MinFinder@add(examples.MinFinder.T):24:_v293245 |==> true
12:LVR:FALSE:TRUE:examples.MinFinder@add(examples.MinFinder.T):25:false |==> true
13:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@add(examples.MinFinder.T):25:_first293243 = false |==> <NO-OP>
14:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@add(examples.MinFinder.T):26:_min293242 = _x293244 |==> <NO-OP>
15:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@add(examples.MinFinder.T):29:_var811 = _min293242 |==> <NO-OP>
16:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):33:_var88 = xs |==> <NO-OP>
17:LVR:TRUE:FALSE:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):35:true |==> false
18:COR:_first293243:TRUE:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):38:_first293243 |==> false
19:COR:_first293243:FALSE:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):38:_first293243 |==> true
20:LVR:TRUE:FALSE:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):39:true |==> false
21:ROR:<(int,int):!=(int,int):examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):41:(_x293244).getVal() < (_min293242).getVal() |==> (_x293244).getVal() != (_min293242).getVal()
22:ROR:<(int,int):<=(int,int):examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):41:(_x293244).getVal() < (_min293242).getVal() |==> (_x293244).getVal() <= (_min293242).getVal()
23:ROR:<(int,int):FALSE(int,int):examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):41:(_x293244).getVal() < (_min293242).getVal() |==> false
24:COR:_v293245:TRUE:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):43:_v293245 |==> false
25:COR:_v293245:FALSE:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):43:_v293245 |==> true
26:LVR:FALSE:TRUE:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):44:false |==> true
27:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):44:_first293243 = false |==> <NO-OP>
28:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):45:_min293242 = _x293244 |==> <NO-OP>
29:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@<init>(java.util.ArrayList<examples.MinFinder.T>):48:_var811 = _min293242 |==> <NO-OP>
30:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@clear():52:_var88 = new java.util.ArrayList<T>() |==> <NO-OP>
31:LVR:TRUE:FALSE:examples.MinFinder@clear():54:true |==> false
32:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@clear():55:_var811 = _min293246 |==> <NO-OP>
33:EVR:<IDENTIFIER(examples.MinFinder.T)>:<DEFAULT>:examples.MinFinder@findmin():59:_var811 |==> null
34:LVR:TRUE:FALSE:examples.MinFinder@findmin():60:true |==> false
35:EVR:<IDENTIFIER(examples.MinFinder.T)>:<DEFAULT>:examples.MinFinder@findmin():61:result |==> null
36:LVR:TRUE:FALSE:examples.MinFinder@chval(examples.MinFinder.T,int):66:true |==> false
37:LVR:0:POS:examples.MinFinder@chval(examples.MinFinder.T,int):68:0 |==> 1
38:LVR:0:NEG:examples.MinFinder@chval(examples.MinFinder.T,int):68:0 |==> -1
39:COR:java.util.Objects.equals(_x293251, x):TRUE:examples.MinFinder@chval(examples.MinFinder.T,int):69:java.util.Objects.equals(_x293251, x) |==> false
40:COR:java.util.Objects.equals(_x293251, x):FALSE:examples.MinFinder@chval(examples.MinFinder.T,int):69:java.util.Objects.equals(_x293251, x) |==> true
41:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@chval(examples.MinFinder.T,int):70:_conditional_result293252 = nv |==> <NO-OP>
42:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@chval(examples.MinFinder.T,int):72:_conditional_result293252 = (_x293251).getVal() |==> <NO-OP>
43:LVR:0:POS:examples.MinFinder@chval(examples.MinFinder.T,int):74:0 |==> 1
44:LVR:0:NEG:examples.MinFinder@chval(examples.MinFinder.T,int):74:0 |==> -1
45:COR:java.util.Objects.equals(_min293249, x):TRUE:examples.MinFinder@chval(examples.MinFinder.T,int):75:java.util.Objects.equals(_min293249, x) |==> false
46:COR:java.util.Objects.equals(_min293249, x):FALSE:examples.MinFinder@chval(examples.MinFinder.T,int):75:java.util.Objects.equals(_min293249, x) |==> true
47:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@chval(examples.MinFinder.T,int):76:_conditional_result293253 = nv |==> <NO-OP>
48:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@chval(examples.MinFinder.T,int):78:_conditional_result293253 = (_min293249).getVal() |==> <NO-OP>
49:COR:_first293250:TRUE:examples.MinFinder@chval(examples.MinFinder.T,int):81:_first293250 |==> false
50:COR:_first293250:FALSE:examples.MinFinder@chval(examples.MinFinder.T,int):81:_first293250 |==> true
51:LVR:TRUE:FALSE:examples.MinFinder@chval(examples.MinFinder.T,int):82:true |==> false
52:ROR:<(int,int):!=(int,int):examples.MinFinder@chval(examples.MinFinder.T,int):84:_conditional_result293252 < _conditional_result293253 |==> _conditional_result293252 != _conditional_result293253
53:ROR:<(int,int):<=(int,int):examples.MinFinder@chval(examples.MinFinder.T,int):84:_conditional_result293252 < _conditional_result293253 |==> _conditional_result293252 <= _conditional_result293253
54:ROR:<(int,int):FALSE(int,int):examples.MinFinder@chval(examples.MinFinder.T,int):84:_conditional_result293252 < _conditional_result293253 |==> false
55:COR:_v293254:TRUE:examples.MinFinder@chval(examples.MinFinder.T,int):86:_v293254 |==> false
56:COR:_v293254:FALSE:examples.MinFinder@chval(examples.MinFinder.T,int):86:_v293254 |==> true
57:LVR:FALSE:TRUE:examples.MinFinder@chval(examples.MinFinder.T,int):87:false |==> true
58:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@chval(examples.MinFinder.T,int):87:_first293250 = false |==> <NO-OP>
59:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@chval(examples.MinFinder.T,int):88:_min293249 = _x293251 |==> <NO-OP>
60:STD:<ASSIGN>:<NO-OP>:examples.MinFinder@chval(examples.MinFinder.T,int):91:_var811 = _min293249 |==> <NO-OP>
61:EVR:<IDENTIFIER(int)>:<DEFAULT>:examples.MinFinder$T@getVal():101:val |==> 0
62:STD:<ASSIGN>:<NO-OP>:examples.MinFinder$T@<init>(int):105:this.val = _v293255 |==> <NO-OP>
63:LVR:FALSE:TRUE:examples.MinFinder$T@equals(java.lang.Object):111:false |==> true
64:STD:<RETURN>:<NO-OP>:examples.MinFinder$T@equals(java.lang.Object):111:return Config.__M_NO == 0 && Config.COVERED(63, 63) ? false : Config.__M_NO == 63 ? true : false; |==> <NO-OP>
65:EVR:<TYPE_CAST(examples.MinFinder.T)>:<DEFAULT>:examples.MinFinder$T@equals(java.lang.Object):112:(T)other |==> null
66:ROR:==(int,int):<=(int,int):examples.MinFinder$T@equals(java.lang.Object):113:o.val == val |==> o.val <= val
67:ROR:==(int,int):>=(int,int):examples.MinFinder$T@equals(java.lang.Object):113:o.val == val |==> o.val >= val
68:ROR:==(int,int):FALSE(int,int):examples.MinFinder$T@equals(java.lang.Object):113:o.val == val |==> false
69:EVR:<IDENTIFIER(int)>:<DEFAULT>:examples.MinFinder$T@hashCode():118:val |==> 0
